get.base.year = function(x){
year.1.chars = strsplit(as.character(x), split = "-")[[1]][1]
year.2.chars = strsplit(as.character(x), split = "-")[[1]][2]
year.1 = as.numeric(substr(year.1.chars, nchar(year.1.chars)-4, nchar(year.1.chars)))
year.2 = as.numeric(substr(year.2.chars, nchar(year.2.chars)-4, nchar(year.2.chars)-1))
return(min(year.1, year.2))
}
get.base.year(x)
pairwise.res$base.year = sapply(pairwise.res$pairs, get.base.year)
table(pairwise.res$base.year)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_text() -> p
library(plotly)
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
print(p)
head(pairwise.res)
pairwise.res$base.year = as.factor(pairwise.res$base.year)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_point() -> p
print(p)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colour = base.year)) + geom_point() -> p
print(p)
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_text()) -> p
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colours = base.year)) + geom_text() -> p
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs, colour = base.year)) + geom_text() -> p
print(p)
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
ggplot(pairwise.res, aes(x = time.difference, y = source.matrix.distances, label = pairs)) + geom_text() -> p
py$ggplotly(p, kwargs=list(filename="LS-ubiome", fileopt="overwrite"))
library(devtools)
install_github("myazdani/pairwise-dist")
library(pairwiseDist)
library(pairwiseDist)
library(pairwiseDist)
library(pairwiseDist)
?pairwise.squared.diff
??pairwise.squared.diff
install_github("myazdani/pairwise-dist")
library(devtools)
install_github("myazdani/pairwise-dist")
library(pairwiseDist)
devtools::install_github("yazdani/pairwise-dist")
devtools::install_github("myazdani/pairwise-dist")
library(pairwiseDist)
setwd("~/Documents/twitter-diurnal-analysis/")
source('~/Documents/twitter-diurnal-analysis/scripts/analysis/twitter_demographic_analysis.R')
summary(housing.census)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08 + log(num.unique.face.images.alt), data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08 + num.unique.face.images.alt, data = df)
print(summary(housing.twitter)$r.squared)
head(median.2013.R.squared[order(median.2013.R.squared, decreasing = TRUE)], 6)
head(tweet.predictor.combs[order(median.2013.R.squared, decreasing = TRUE)], 6)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08 + I(num.unique.face.images.alt/num.people.social.faces.alt), data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08 + log(I(num.unique.face.images.alt/num.people.social.faces.alt)), data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08 + log(I(num.unique.face.images.alt/social.face.alt)), data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08 + I(num.unique.face.images.alt/social.face.alt), data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08 + I(num.unique.face.images.alt*num.rows), data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08 + lof(I(num.unique.face.images.alt*num.rows)), data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08 + log(I(num.unique.face.images.alt*num.rows)), data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08  + log(I(num.unique.face.images.alt)), data = df)
print(summary(housing.twitter)$r.squared)
housing.census = lm(median.2013 ~ bachelors+disabled+income+unemployed, data = df)
summary(housing.census)
tweet.predictor.combs = combn(tweet.predictors, 4, simplify = FALSE)
median.2013.R.squared = sapply(tweet.predictor.combs, FUN = function(x) summary(lm(median.2013 ~ ., data = df[,c("median.2013", x)]))$r.squared)
head(median.2013.R.squared[order(median.2013.R.squared, decreasing = TRUE)], 6)
head(tweet.predictor.combs[order(median.2013.R.squared, decreasing = TRUE)], 6)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ log(I(social.face.alt/num.people.social.faces.alt)) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ log(I(social.face.alt/num.people.social.faces.alt)) + log(I(social.face.alt/face.present.alt)) + bin.0.count  + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ log(I(social.face.alt/num.people.social.faces.alt)) + log(I(social.face.alt/face.present.alt)) + log(bin.0.count)  + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
tweet.predictors = names(df)[-which(names(df) %in% c("city", "bachelors", "disabled", "income", "pop", "unemployed", "median.2013", "num.rows"))]
tweet.raw.counts = c("num.faces.alt", "face.present.alt","num.people.social.faces.alt","solo.face.alt","social.face.alt", "bin.0.count", "num.unique.images" ,"num.unique.face.images.alt",
"num.faces.alt.tree", "face.present.alt.tree","num.people.social.faces.alt.tree","solo.face.alt.tree","social.face.alt.tree", "num.unique.face.images.alt.tree")
df[,tweet.raw.counts] = df[,tweet.raw.counts]/df$num.rows
tweet.predictor.combs = combn(tweet.predictors, 4, simplify = FALSE)
median.2013.R.squared = sapply(tweet.predictor.combs, FUN = function(x) summary(lm(median.2013 ~ ., data = df[,c("median.2013", x)]))$r.squared)
head(median.2013.R.squared[order(median.2013.R.squared, decreasing = TRUE)], 6)
head(tweet.predictor.combs[order(median.2013.R.squared, decreasing = TRUE)], 6)
summary(housing.census)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt) + bin.0.count  + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + I(social.face.alt/face.present.alt)  + Hbin.00+ Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
head(tweet.predictor.combs[order(median.2013.R.squared, decreasing = TRUE)], 6)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + face.present.rate.alt.tree.entropy  + Hbin.00+ Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt/num.people.social.faces.alt) + face.present.rate.alt.tree.entropy  +  Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt) + face.present.rate.alt.tree.entropy  +  Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ face.present.rate.alt.tree.entropy + num.people.social.faces.alt  + social.face.alt + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ face.present.rate.alt.tree.entropy + num.people.social.faces.alt  + I(social.face.alt/num.people.social.faces.alt) + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ face.present.rate.alt.entropy + num.people.social.faces.alt  + I(social.face.alt/num.people.social.faces.alt) + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(face.present.rate.alt.entropy/num.people.social.faces.alt) +  Hbin.00 + I(social.face.alt/num.people.social.faces.alt) + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(face.present.rate.alt.entropy/face.present.alt) +  Hbin.00 + I(social.face.alt/num.people.social.faces.alt) + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt/face.present.alt) +  Hbin.00 + I(social.face.alt/num.people.social.faces.alt) + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(social.face.alt/face.present.alt) + solo.face.rate.alt.tree.entropy + I(social.face.alt/num.people.social.faces.alt) + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ solo.face.rate.alt.tree.entropy + I(social.face.alt/num.people.social.faces.alt) + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ solo.face.rate.alt.tree.entropy + Hbin.00 +  I(social.face.alt/num.people.social.faces.alt) + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ solo.face.rate.alt.tree.entropy + Hbin.00 +  I(social.face.alt/num.people.social.faces.alt) + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(solo.face.rate.alt.tree.entropy/num.people.social.faces.alt) + Hbin.00 +  I(social.face.alt/num.people.social.faces.alt) + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(solo.face.rate.alt.tree.entropy/social.face.alt) + Hbin.00 +  I(social.face.alt/num.people.social.faces.alt) + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
source('~/Documents/twitter-diurnal-analysis/scripts/analysis/twitter_demographic_analysis.R')
head(median.2013.R.squared[order(median.2013.R.squared, decreasing = TRUE)], 6)
head(tweet.predictor.combs[order(median.2013.R.squared, decreasing = TRUE)], 6)
summary(housing.census)
housing.twitter = lm(median.2013 ~ solo.face.rate.alt.tree.entropy + Hbin.10 +  I(social.face.alt/num.people.social.faces.alt) + Hbin.11, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ solo.face.rate.alt.tree.entropy + Hbin.10 +  log(I(social.face.alt/num.people.social.faces.alt)) + Hbin.11, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ solo.face.rate.alt.tree.entropy + bin.0.count +  I(social.face.alt/num.people.social.faces.alt) + Hbin.10, data = df)
print(summary(housing.twitter)$r.squared)
head(tweet.predictor.combs[order(median.2013.R.squared, decreasing = TRUE)], 6)
head(tweet.predictor.combs[order(median.2013.R.squared, decreasing = TRUE)], 6)
head(median.2013.R.squared[order(median.2013.R.squared, decreasing = TRUE)], 6)
housing.twitter = lm(median.2013 ~ face.present.alt + bin.0.count +  I(social.face.alt/num.people.social.faces.alt) + Hbin.10, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(face.present.alt/solo.face.alt) + bin.0.count +  I(social.face.alt/num.people.social.faces.alt) + Hbin.10, data = df)
print(summary(housing.twitter)$r.squared)
source('~/Documents/twitter-diurnal-analysis/scripts/analysis/twitter_demographic_analysis.R')
head(median.2013.R.squared[order(median.2013.R.squared, decreasing = TRUE)], 6)
head(tweet.predictor.combs[order(median.2013.R.squared, decreasing = TRUE)], 6)
housing.twitter = lm(median.2013 ~ I(face.present.alt/solo.face.alt) + bin.0.count +  I(social.face.alt/num.people.social.faces.alt) + Hbin.11, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(face.present.alt/solo.face.alt) + bin.0.count +  I(social.face.alt/num.people.social.faces.alt) + Hbin.08, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(face.present.alt/solo.face.alt) + bin.0.count +  I(social.face.alt/num.people.social.faces.alt) + Hbin.11, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(face.present.alt/solo.face.alt) + bin.0.count +  I(social.face.alt/num.people.social.faces.alt) + Hbin.10, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(face.present.alt/solo.face.alt) + log(bin.0.count) +  I(social.face.alt/num.people.social.faces.alt) + Hbin.10, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(face.present.alt/solo.face.alt) + log(bin.0.count) +  log(I(social.face.alt/num.people.social.faces.alt)) + Hbin.10, data = df)
print(summary(housing.twitter)$r.squared)
housing.twitter = lm(median.2013 ~ I(face.present.alt/solo.face.alt) + bin.0.count +  log(I(social.face.alt/num.people.social.faces.alt)) + Hbin.10, data = df)
print(summary(housing.twitter)$r.squared)
head(median.2013.R.squared[order(median.2013.R.squared, decreasing = TRUE)], 6)
head(tweet.predictor.combs[order(median.2013.R.squared, decreasing = TRUE)], 6)
housing.twitter = lm(median.2013 ~ I(face.present.alt/solo.face.alt) + bin.0.count +  log(I(social.face.alt/num.people.social.faces.alt)) + num.rows, data = df)
print(summary(housing.twitter)$r.squared)
user.data = fread("~/Dropbox/TwitterPaper/data/US_HSV_modes_top60_cities_weather_user.csv", header = TRUE)
head(user.data)
bleh = unique(user.data$actor)
length(bleh)
source('~/Documents/twitter-diurnal-analysis/scripts/dataManip/feature-extraction/user-stat-features.R')
head(dt)
?sd
num.bins = 12
num.steps = 180/num.bins
bin.edges.left = seq(from = 0, to = 180, by = num.steps) #includes bin from left, but not right
bin.edges.left[1] = 1
bin.edges.left = c(0, bin.edges.left)
names(bin.edges.left)[1:10] = paste0("bin.0", c(0:9))
names(bin.edges.left)[11:length(bin.edges.left)] = paste0("bin.",c(11:length(bin.edges.left)-1))
find.hue.bin = function(x){
return(names(bin.edges.left)[max(which(x >= bin.edges.left))])
}
dt$H.mode.binned = sapply(dt$H.mode, find.hue.bin)
head(dt)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
user.stats = function(df){
user.df = data.frame(gps.sd = sd(df$lat) + sd(df$lon), dom.city = Mode(df$city), num.cities = length(unique(df$city)),
typical.hue = Modde(H.mode.binned), avg.hue = mean(df$H.mode))
return(user.df)
}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
user.stats = function(df){
user.df = data.frame(gps.sd = sd(df$lat) + sd(df$lon), dom.city = Mode(df$city), num.cities = length(unique(df$city)),
typical.hue = Modde(H.mode.binned), avg.hue = mean(df$H.mode))
return(user.df)
}
as.data.frame(dt) %>%
group_by(acor) %>%
do(user.stats(.)) %>%
as.data.frame() -> user.activies.df
dt$actor = as.character(dt$actor)
as.data.frame(dt) %>%
group_by(acor) %>%
do(user.stats(.)) %>%
as.data.frame() -> user.activies.df
as.data.frame(dt) %>%
group_by(actor) %>%
do(user.stats(.)) %>%
as.data.frame() -> user.activies.df
user.stats = function(df){
user.df = data.frame(gps.sd = sd(df$lat) + sd(df$lon), dom.city = Mode(df$city), num.cities = length(unique(df$city)),
typical.hue = Mode(H.mode.binned), avg.hue = mean(df$H.mode))
return(user.df)
}
as.data.frame(dt) %>%
group_by(actor) %>%
do(user.stats(.)) %>%
as.data.frame() -> user.activies.df
head(dt)
user.stats = function(df){
user.df = data.frame(gps.sd = sd(df$lat) + sd(df$lon), dom.city = Mode(df$city), num.cities = length(unique(df$city)),
typical.hue = Mode(df$H.mode.binned), avg.hue = mean(df$H.mode))
return(user.df)
}
as.data.frame(dt) %>%
group_by(actor) %>%
do(user.stats(.)) %>%
as.data.frame() -> user.activies.df
head(user.activies.df)
nrow(user.activies.df)
head(user.activies.df[order(user.activies.df$num.cities, decreasing = TRUE), ])
user.stats = function(df){
user.df = data.frame(num.images = nrow(df), gps.sd = sd(df$lat) + sd(df$lon), dom.city = Mode(df$city), num.cities = length(unique(df$city)),
typical.hue = Mode(df$H.mode.binned), avg.hue = mean(df$H.mode))
return(user.df)
}
as.data.frame(dt) %>%
group_by(actor) %>%
do(user.stats(.)) %>%
as.data.frame() -> user.activies.df
head(dt)
head(user.activies.df[order(user.activies.df$num.cities, decreasing = TRUE), ])
tail(user.activies.df[order(user.activies.df$num.cities, decreasing = TRUE), ])
sd(c(1,2))
sd(c(1))
tail(user.activies.df[order(user.activies.df$num.images, decreasing = TRUE), ])
head(user.activies.df[order(user.activies.df$num.images, decreasing = TRUE), ])
ggplot(na.omit(user.activies.df), aes(x = num.images, y = gps.sd)) + geom_point()
ggplot(na.omit(user.activies.df), aes(x = log(num.images), y = gps.sd)) + geom_point()
ggplot(na.omit(user.activies.df), aes(x = avg.hue, y = gps.sd)) + geom_point()
head(user.activies.df[order(user.activies.df$num.cities, decreasing = TRUE), ])
ggplot(na.omit(user.activies.df), aes(x = avg.hue, y = gps.sd, colour = num.cities)) + geom_point()
ggplot(na.omit(user.activies.df), aes(x = avg.hue, y = gps.sd, colour = log(num.cities))) + geom_point()
get.num.tags = function(x) {
content.split = strsplit(x, split = " ")[[1]]
res = grep("#+", content.split, value = TRUE)
return(length(res[which(nchar(res) > 1)]))
}
load("~/Dropbox/Broadway_paper/data/instagram_park_ave_1_num_likes_census_tract.Rda")
head(res.agg)
head(res.agg)
head(res.agg[order(res.agg$num.tags), ])
head(res.agg[order(res.agg$num.tags, decreasing = TRUE), ])
tag.rich = subset(res.agg, num.tags > 1)
?sample
sample(100)
sample(c(1:10), 3)
sample.indx = sample(c(1:nrow(tag.rich)), 5000)
get.tags = function(x) {
content.split = strsplit(x, split = " ")[[1]]
res = grep("#+", content.split, value = TRUE)
return(res)
}
tags.sample = lapply(sample.indx, FUN = function(x) get.tags(res.agg$content[x]))
head(tags.sample)
length(tags.sample)
tag.rich = subset(res.agg, num.tags > 2)
sample.indx = sample(c(1:nrow(tag.rich)), 5000)
tags.sample = lapply(sample.indx, FUN = function(x) get.tags(res.agg$content[x]))
head(tags.sample)
tag.rich = subset(res.agg, num.tags > 1)
sample.indx = sample(c(1:nrow(tag.rich)), 5000)
tags.sample = lapply(sample.indx, FUN = function(x) get.tags(tag.rich$content[x]))
head(tags.sample)
tags.sample = sapply(sample.indx, FUN = function(x) get.tags(tag.rich$content[x]))
head(tags.sample)
head(unlist(tags.sample))
length(unlist(tags.sample))
unlist(tags.sample)
?wrte.table
?write.table
write.table(tags.sample, file = "~/Dropbox/Broadway_paper/data/tags-5K-images.txt", row.names = FALSE, col.names = FALSE)
write.table(data.frame(tags = tags.sample), file = "~/Dropbox/Broadway_paper/data/tags-5K-images.txt", row.names = FALSE, col.names = FALSE)
df = data.frame(tags = tags.sample)
df = data.frame(tags = unlist(tags.sample))
head(df)
write.table(df, file = "~/Dropbox/Broadway_paper/data/tags-5K-images.txt", row.names = FALSE, col.names = FALSE)
head(user.stats)
head(user.activies.df)
user.stats = function(df){
user.df = data.frame(num.images = nrow(df), gps.sd = sd(df$lat) + sd(df$lon), dom.city = Mode(df$city), num.cities = length(unique(df$city)),
typical.hue = Mode(df$H.mode.binned), avg.hue = mean(df$H.mode), sd.hue = sd(df$H.mode))
return(user.df)
}
rm(res.agg)
gc()
as.data.frame(dt) %>%
group_by(actor) %>%
do(user.stats(.)) %>%
as.data.frame() -> user.activies.df
head(user.activies.df)
ggplot(na.omit(user.activies.df), aes(x = gps.sd, y = sd.hue, colour = num.cities)) + geom_point()
ggplot(na.omit(user.activies.df), aes(x = gps.sd, y = sd.hue, colour = log(num.cities)) + geom_point()
ggplot(na.omit(user.activies.df), aes(x = gps.sd, y = sd.hue, colour = log(num.cities))) + geom_point()
ggplot(na.omit(user.activies.df), aes(x = gps.sd, y = sd.hue, colour = log(num.cities))) + geom_point(alpha = .4)
ggplot(na.omit(user.activies.df), aes(x = gps.sd, y = sd.hue, colour = log(num.cities))) + geom_point(alpha = .1)
write.csv(user.activies.df, file = './data/features/user_stats.csv', row.names = FALSE, quote = FALSE)
head(user.activies.df)
head(which(is.na(user.activies.df)))
user.activies.df[is.na(user.activies.df)] = 0
head(user.activies.df)
write.csv(user.activies.df, file = './data/features/user_stats.csv', row.names = FALSE, quote = FALSE)
city.user.stats = function(df){
city.user.df = data.frame(num.users = length(unique(df$actor)),median.images = median(df$num.images),
median.cities = median(df$num.cities), hue.mode = Mode(df$typical.hue))
}
user.activies.df %>%
group_by(dom.city) %>%
do(city.user.stats(.)) %>%
as.data.frame() -> city.user.agg
dim(city.user.agg)
head(city.user.agg)
city.user.agg
?quantile
quantile(city.user.agg$num.users)
quantile(city.user.agg$num.users)[1:3]
quantile(city.user.agg$num.users)[2:4]
quantile(city.user.agg$num.users, probs = c(.25, .5, .75, 95))
quantile(city.user.agg$num.users, probs = c(.25, .5, .75, .95))
quantile(city.user.agg$num.users, probs = c(.25, .5, .75, .8))
quantile(city.user.agg$num.users, probs = c(.25, .5, .75, .8, .95))
quantile(city.user.agg$hue.mode, probs = c(.25, .5, .75, .8, .95))
city.user.stats = function(df){
city.user.df = data.frame(num.users = length(unique(df$actor)),median.images = median(df$num.images),
median.cities = median(df$num.cities), hue.mode = Mode(df$typical.hue),
images.quantiles = quantile(df$num.images, probs = c(.25, .5, .75, .8, .95)))
}
user.activies.df %>%
group_by(dom.city) %>%
do(city.user.stats(.)) %>%
as.data.frame() -> city.user.agg
head(city.user.agg)
class(quantile(city.user.agg$hue.mode, probs = c(.25, .5, .75, .8, .95)))
quantile(city.user.agg$num.users, probs = c(.25, .5, .75, .8, .95))
class(quantile(city.user.agg$num.users, probs = c(.25, .5, .75, .8, .95)))
quantile(city.user.agg$num.users, probs = c(.25, .5, .75, .8, .95))
list(quantile(city.user.agg$num.users, probs = c(.25, .5, .75, .8, .95)))
names(quantile(city.user.agg$num.users, probs = c(.25, .5, .75, .8, .95)))
paste0("image.q.", names(quantile(city.user.agg$num.users, probs = c(.25, .5, .75, .8, .95)))
)
as.data.frame(quantile(city.user.agg$num.users, probs = c(.25, .5, .75, .8, .95)))
quantile_df <- function(x, probs, na.rm =F, names = F, type = 7, ...){
z <- quantile(x, probs, na.rm, names, type)
return(data.frame(id = probs, values = z))
}
quantile_df(city.user.agg$num.users, probs = c(.25, .5, .75, .8, .95))
quantile(city.user.agg)
quantile(city.user.agg$num.users)
as.data.frame(quantile(city.user.agg$num.users))
as.data.frame(t(quantile(city.user.agg$num.users)))
city.user.stats = function(df){
quantile.df = as.data.frame(t(quantile(city.user.agg$num.users)))
names(quantile.df) = paste0("num.img.quantile", names(quantile.df))
city.user.df = data.frame(num.users = length(unique(df$actor)),
median.cities = median(df$num.cities), hue.mode = Mode(df$typical.hue))
return(cbind(city.user.df, quantile.df))
}
user.activies.df %>%
group_by(dom.city) %>%
do(city.user.stats(.)) %>%
as.data.frame() -> city.user.agg
head(city.user.agg)
city.user.stats = function(df){
num.img.quantile.df = as.data.frame(t(quantile(city.user.agg$num.users)))
names(num.img.quantile.df) = paste0("num.cities.q", names(num.img.quantile.df))
num.cities.quantile.df = as.data.frame(t(quantile(city.user.agg$num.cities)))
names(num.cities.quantile.df) = paste0("num.cities.q", names(num.cities.quantile.df))
city.user.df = data.frame(num.users = length(unique(df$actor)), hue.mode = Mode(df$typical.hue))
return(cbind(city.user.df, num.img.quantile.df, num.cities.quantile.df))
}
user.activies.df %>%
group_by(dom.city) %>%
do(city.user.stats(.)) %>%
as.data.frame() -> city.user.agg
head(city.user.agg)
city.user.stats = function(df){
num.img.quantile.df = as.data.frame(t(quantile(df$num.users)))
names(num.img.quantile.df) = paste0("num.cities.q", names(num.img.quantile.df))
num.cities.quantile.df = as.data.frame(t(quantile(df$num.cities)))
names(num.cities.quantile.df) = paste0("num.cities.q", names(num.cities.quantile.df))
city.user.df = data.frame(num.users = length(unique(df$actor)), hue.mode = Mode(df$typical.hue))
return(cbind(city.user.df, num.img.quantile.df, num.cities.quantile.df))
}
user.activies.df %>%
group_by(dom.city) %>%
do(city.user.stats(.)) %>%
as.data.frame() -> city.user.agg
head(city.user.agg)
city.user.stats = function(df){
num.img.quantile.df = as.data.frame(t(quantile(df$num.users)))
names(num.img.quantile.df) = paste0("num.cities.q", names(num.img.quantile.df))
num.cities.quantile.df = as.data.frame(t(quantile(df$num.cities)))
names(num.cities.quantile.df) = paste0("num.cities.q", names(num.cities.quantile.df))
city.user.df = data.frame(num.users = length(unique(df$actor)), hue.mode = Mode(df$typical.hue))
return(cbind(city.user.df, num.img.quantile.df, num.cities.quantile.df))
}
user.activies.df %>%
group_by(dom.city) %>%
do(city.user.stats(.)) %>%
as.data.frame() -> city.user.agg
head(city.user.agg)
head(user.activies.df)
city.user.stats = function(df){
num.img.quantile.df = as.data.frame(t(quantile(df$num.images)))
names(num.img.quantile.df) = paste0("num.cities.q", names(num.img.quantile.df))
num.cities.quantile.df = as.data.frame(t(quantile(df$num.cities)))
names(num.cities.quantile.df) = paste0("num.cities.q", names(num.cities.quantile.df))
city.user.df = data.frame(num.users = length(unique(df$actor)), hue.mode = Mode(df$typical.hue))
return(cbind(city.user.df, num.img.quantile.df, num.cities.quantile.df))
}
user.activies.df %>%
group_by(dom.city) %>%
do(city.user.stats(.)) %>%
as.data.frame() -> city.user.agg
head(city.user.agg)
head(user.activies.df)
t(quantile(user.activies.df$num.images))
city.user.stats = function(df){
print(head(df))
num.img.quantile.df = as.data.frame(t(quantile(df$num.images)))
names(num.img.quantile.df) = paste0("num.cities.q", names(num.img.quantile.df))
num.cities.quantile.df = as.data.frame(t(quantile(df$num.cities)))
names(num.cities.quantile.df) = paste0("num.cities.q", names(num.cities.quantile.df))
city.user.df = data.frame(num.users = length(unique(df$actor)), hue.mode = Mode(df$typical.hue))
return(cbind(city.user.df, num.img.quantile.df, num.cities.quantile.df))
}
user.activies.df %>%
group_by(dom.city) %>%
do(city.user.stats(.)) %>%
as.data.frame() -> city.user.agg
city.user.stats = function(df){
num.img.quantile.df = as.data.frame(t(quantile(df$num.images)))
names(num.img.quantile.df) = paste0("num.cities.q", names(num.img.quantile.df))
print(num.img.quantile.df)
num.cities.quantile.df = as.data.frame(t(quantile(df$num.cities)))
names(num.cities.quantile.df) = paste0("num.cities.q", names(num.cities.quantile.df))
city.user.df = data.frame(num.users = length(unique(df$actor)), hue.mode = Mode(df$typical.hue))
return(cbind(city.user.df, num.img.quantile.df, num.cities.quantile.df))
}
user.activies.df %>%
group_by(dom.city) %>%
do(city.user.stats(.)) %>%
as.data.frame() -> city.user.agg
head(city.user.agg)
city.user.stats = function(df){
num.img.quantile.df = as.data.frame(t(quantile(df$num.images)))
names(num.img.quantile.df) = paste0("num.imgs.q", names(num.img.quantile.df))
num.cities.quantile.df = as.data.frame(t(quantile(df$num.cities)))
names(num.cities.quantile.df) = paste0("num.cities.q", names(num.cities.quantile.df))
city.user.df = data.frame(num.users = length(unique(df$actor)), hue.mode = Mode(df$typical.hue))
return(cbind(city.user.df, num.img.quantile.df, num.cities.quantile.df))
}
user.activies.df %>%
group_by(dom.city) %>%
do(city.user.stats(.)) %>%
as.data.frame() -> city.user.agg
head(city.user.agg)
city.user.stats = function(df){
num.img.quantile.df = as.data.frame(t(quantile(df$num.images, probs = c(.5, .75, .8, .85, .9, .95))))
names(num.img.quantile.df) = paste0("num.imgs.q", names(num.img.quantile.df))
num.cities.quantile.df = as.data.frame(t(quantile(df$num.cities, probs = c(.5, .75, .8, .85, .9, .95))))
names(num.cities.quantile.df) = paste0("num.cities.q", names(num.cities.quantile.df))
city.user.df = data.frame(num.users = length(unique(df$actor)), hue.mode = Mode(df$typical.hue))
return(cbind(city.user.df, num.img.quantile.df, num.cities.quantile.df))
}
user.activies.df %>%
group_by(dom.city) %>%
do(city.user.stats(.)) %>%
as.data.frame() -> city.user.agg
head(city.user.agg)
city.user.stats = function(df){
num.img.quantile.df = as.data.frame(t(quantile(df$num.images, probs = c(.5, .8, .85, .9, .95, 1))))
names(num.img.quantile.df) = paste0("num.imgs.q", names(num.img.quantile.df))
num.cities.quantile.df = as.data.frame(t(quantile(df$num.cities, probs = c(.5, .8, .85, .9, .95, 1))))
names(num.cities.quantile.df) = paste0("num.cities.q", names(num.cities.quantile.df))
city.user.df = data.frame(num.users = length(unique(df$actor)), hue.mode = Mode(df$typical.hue))
return(cbind(city.user.df, num.img.quantile.df, num.cities.quantile.df))
}
user.activies.df %>%
group_by(dom.city) %>%
do(city.user.stats(.)) %>%
as.data.frame() -> city.user.agg
head(city.user.agg)
